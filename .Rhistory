taxonomy <- read_qza("data/dada2_table_final.qza")
library(qiime2R)
library(tidyverse)
ASV_table <- read_qza("data/dada2_table_final.qza")
View(ASV_table)
# unpacking feature-table.qza file, and extracting the ASV-table as data frame
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame()
View(ASV_table)
# unpacking feature-table.qza file, and extracting the ASV-table as data frame
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame() %>%
rename_with(gsub('data.', '', ASV_table))
# unpacking feature-table.qza file, and extracting the ASV-table as data frame
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame() %>%
rename_with(funs(gsub('data.', '', ASV_table)))
# unpacking feature-table.qza file, and extracting the ASV-table as data frame
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame() %>%
rename_with(function(x){gsub('data.', '', x)})
View(ASV_table)
# unpacking feature-table.qza file, and extracting the ASV-table as data frame
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame() %>%
rename_with(
function(x){
gsub('data.', '', x)
gsub('\\.', '-', x)
})
View(ASV_table)
# unpacking feature-table.qza file, and extracting the ASV-table as data frame
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame() %>%
rename_with(
function(x){
gsub('\\.', '-', x)
})
View(ASV_table)
# unpacking feature-table.qza file, and extracting the ASV-table as data frame
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame() %>%
rename_with(
function(x){
x <- gsub('\\.', '-', x)
gsub('data-', '', x)
})
View(ASV_table)
ASV_table <- cbind(ASVs=rownames(ASV_table), ASV_table)
View(ASV_table)
library(qiime2R)
library(tidyverse)
# unpacking feature-table.qza file, extracting the ASV-table as data frame, and renaming appropriately
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame() %>%
rename_with(                   # Renaming column names to match metadata file
function(x){
x <- gsub('\\.', '-', x)     # Changing all '.' by '-'
gsub('data-', '', x)         # removing all instances of 'data-'
})
ASV_table <- cbind(ASVs=rownames(ASV_table), ASV_table)
# writing .csv file into 'data/'
write.csv(ASV_table, 'data/ASV_table.csv', row.names = F)
# Loading packages
library(phyloseq)     # Data structure and functions for seq data
library(tidyverse)    # Data handling and all
library(microbiome)   # Contains CLR data transformation
metadata <-  read_tsv("./data/metadata.tsv") %>%
column_to_rownames(var = "sampleid")
View(metadata)
ASV_table <- read_csv("./data/ASV_table.csv")
View(metadata)
View(ASV_table)
ASV_table <- read_csv("./data/ASV_table.csv") %>%
as.data.frame() %>%             # Necessary format for phyloseq
column_to_rownames('ASVs')
View(ASV_table)
ASV_table <- otu_table(ASV_table, taxa_are_rows = TRUE)
metadata <- sample_data(metadata)
# (ASV table, Taxonomy table, and Metadata)
(physeq_data <-  merge_phyloseq(ASV_table, metadata))
sample_data(physeq_data)
# Applying a centered log ratio transformation to the data sets
physeq_CLR <- microbiome::transform(physeq_data, "clr")
# Calculating Euclidean distances with a NMDS method for plotting
physeq_NMDS_Eucl <- phyloseq::ordinate(physeq_CLR, method = "NMDS", distance = "euclidean")
plot_ordination(physeq_CLR, physeq_NMDS_Eucl, color="provider") +
geom_point(size=5) +
ggtitle("V4V5 Amplicons processed with microbiome helper deblur (euclidean distances from clr data")
# Plotting
plot_ordination(physeq_CLR, physeq_NMDS_Eucl, color="depth") +
geom_point(size=5)
# Saving to files
ggsave("./doc/NMDS_of_clr_data_in_Euclidean_dist.png")
# Loading packages
library(phyloseq)     # Data structure and functions for seq data
library(tidyverse)    # Data handling and all
library(microbiome)   # Contains CLR data transformation
### Pre-Processing All Data Sources ###
## Metadata
# import data and make sample ID the row names
metadata <-  read_tsv("./data/metadata.tsv") %>%
column_to_rownames(var = "sampleid")
## ASV table (Sample X Taxon, read counts)
# Read ASV table but skip first row because all it is is '# Constructed from biom file'
ASV_table <- read_csv("./data/ASV_table.csv") %>%
as.data.frame() %>%             # Necessary format for phyloseq
column_to_rownames('ASVs')      # Make ASV IDs row names
### Creating Phyloseq Object ###
# loading universal V4V5 marker data, pre-processed with deblur, into respective phyloseq objects
ASV_table <- otu_table(ASV_table, taxa_are_rows = TRUE)
metadata <- sample_data(metadata)
# Merging all data into 1 global object
# (ASV table, Taxonomy table, and Metadata)
# ASV ID and sample names that don't match will get dropped
(physeq_data <-  merge_phyloseq(ASV_table, metadata))
### Transforming and Vizualising data ###
# Applying a centered log ratio transformation to the data sets
physeq_CLR <- microbiome::transform(physeq_data, "clr")
# Calculating Euclidean distances with a NMDS method for plotting
physeq_NMDS_Eucl <- phyloseq::ordinate(physeq_CLR, method = "NMDS", distance = "euclidean")
# Plotting
plot_ordination(physeq_CLR, physeq_NMDS_Eucl, color="depth") +
geom_point(size=5)
# Saving to files
ggsave("./doc/NMDS_of_clr_data_in_Euclidean_dist.png")
# Saving to files
ggsave("./docs/NMDS_of_clr_data_in_Euclidean_dist.png")
### Pre-Processing All Data Sources ###
## Metadata
# import data and make sample ID the row names
metadata <-  read_tsv("./data/metadata.tsv") %>%
column_to_rownames(var = "sampleid")
## ASV table (Sample X Taxon, read counts)
ASV_table <- read_csv("./data/ASV_table.csv") %>%
column_to_rownames('ASVs')      # Make ASV IDs row names
### Creating Phyloseq Object ###
# loading universal V4V5 marker data, pre-processed with deblur, into respective phyloseq objects
ASV_table <- otu_table(ASV_table, taxa_are_rows = TRUE)
metadata <- sample_data(metadata)
# Merging all data into 1 global object
# (ASV table, Taxonomy table, and Metadata)
# ASV ID and sample names that don't match will get dropped
(physeq_data <-  merge_phyloseq(ASV_table, metadata))
### Transforming and Vizualising data ###
# Applying a centered log ratio transformation to the data sets
physeq_CLR <- microbiome::transform(physeq_data, "clr")
# Calculating Euclidean distances with a NMDS method for plotting
physeq_NMDS_Eucl <- phyloseq::ordinate(physeq_CLR, method = "NMDS", distance = "euclidean")
# Plotting
plot_ordination(physeq_CLR, physeq_NMDS_Eucl, color="depth") +
geom_point(size=5)
# Saving to files
#ggsave("./docs/NMDS_of_clr_data_in_Euclidean_dist.png")
metadata <-  read_tsv("./data/metadata.tsv") %>%
column_to_rownames(var = "sampleid")    # make sample ID the row names
# ASV table (Sample X Taxon, read counts)
ASV_table <- read_csv("./data/ASV_table.csv") %>%
column_to_rownames('ASVs')      # Make ASV IDs row names
### Creating Phyloseq Object ###
physeq_data <-  phyloseq(ASV_table, metadata)
getwd()
metadata <-  read_tsv("./data/metadata.tsv") %>%
column_to_rownames(var = "sampleid")    # make sample ID the row names
# ASV table (Sample X Taxon, read counts)
ASV_table <- read_csv("./data/ASV_table.csv") %>%
column_to_rownames('ASVs')      # Make ASV IDs row names
# Loading packages
library(phyloseq)     # Data structure and functions for seq data
library(tidyverse)    # Data handling and all
library(microbiome)   # Contains CLR data transformation
### Pre-Processing All Data Sources ###
# Metadata
metadata <-  read_tsv("./data/metadata.tsv") %>%
column_to_rownames(var = "sampleid")    # make sample ID the row names
# ASV table (Sample X Taxon, read counts)
ASV_table <- read_csv("./data/ASV_table.csv") %>%
column_to_rownames('ASVs')      # Make ASV IDs row names
library(qiime2R)
library(tidyverse)
# unpacking feature-table.qza file, extracting the ASV-table as data frame, and renaming appropriately
ASV_table <- read_qza("data/dada2_table_final.qza")['data'] %>%
data.frame() %>%
rename_with(                   # Renaming column names to match metadata file
function(x){
x <- gsub('\\.', '-', x)     # Changing all '.' by '-'
gsub('data-', '', x)         # removing all instances of 'data-'
})
ASV_table <- cbind(ASVs=rownames(ASV_table), ASV_table)
# writing .csv file into 'data/'
write.csv(ASV_table, 'data/ASV_table.csv', row.names = F)
